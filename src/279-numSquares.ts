/**
 * 279. 完全平方数 (Perfect Squares)
 * 
 * 给定正整数 `n`，找到若干个完全平方数（比如 1, 4, 9, 16, 25, ...）的和，使得它们的和为 `n`。
 * 
 * 你需要返回 **最少** 多少个完全平方数的和。
 * 
 * **示例 1：**
 * 输入：n = 12
 * 输出：3
 * 解释：12 = 4 + 4 + 4。
 * 
 * **示例 2：**
 * 输入：n = 13
 * 输出：2
 * 解释：13 = 4 + 9。
 * 
 * **提示：**
 * 1. `1 <= n <= 10^4`
 */

function numSquares(n: number): number {
    // 创建一个 dp 数组，dp[i] 表示数字 i 需要的最少完全平方数的个数
    const dp: number[] = new Array(n + 1).fill(Infinity);
    
    // dp[0] = 0，因为 0 不需要任何完全平方数
    dp[0] = 0;
    
    // 遍历每个小于等于 n 的数字
    for (let i = 1; i <= n; i++) {
        // 对于每个 i，遍历所有小于 i 的完全平方数
        for (let j = 1; j * j <= i; j++) {
            // 更新 dp[i]
            dp[i] = Math.min(dp[i], dp[i - j * j] + 1);
        }
    }
    
    // 返回 dp[n]，即表示数字 n 所需的最少完全平方数的个数
    return dp[n];
}
