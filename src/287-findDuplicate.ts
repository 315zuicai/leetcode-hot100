/**
 * 287. 寻找重复数 (Find the Duplicate Number)
 * 
 * 给定一个包含 `n + 1` 个整数的数组 `nums`，其数字都在 `1` 到 `n` 之间（包含 `1` 和 `n`）。  
 * 该数组中只有一个重复的数字，返回这个重复的数字。
 * 
 * **示例 1：**
 * 输入：nums = [1,3,4,2,2]
 * 输出：2
 * 
 * **示例 2：**
 * 输入：nums = [3,1,3,4,2]
 * 输出：3
 * 
 * **示例 3：**
 * 输入：nums = [1,1]
 * 输出：1
 * 
 * **提示：**
 * 1. `2 <= nums.length <= 10^5`
 * 2. `1 <= nums[i] <= n`
 * 3. 题目数据保证至少有一个重复的数字
 * 
 * **进阶：**
 * - 你可以不修改数组，使用 **O(1)** 的空间复杂度解决此问题。
 * - 你可以考虑使用 **二分查找** 或 **快慢指针** 技巧。
 */
function findDuplicate(nums: number[]): number {
    // 初始化快慢指针
    let slow = nums[0];
    let fast = nums[0];
    
    // 第一阶段：找环的入口
    // 慢指针每次走一步，快指针每次走两步
    do {
        slow = nums[slow];          // 慢指针走一步
        fast = nums[nums[fast]];    // 快指针走两步
    } while (slow !== fast);        // 当快慢指针相遇时停止
    
    // 第二阶段：找重复的数字
    // 把慢指针移到头部，快指针停留在相遇点
    slow = nums[0];
    // 继续走一步，直到快慢指针相遇，位置即为重复的数字
    while (slow !== fast) {
        slow = nums[slow];          // 慢指针走一步
        fast = nums[fast];          // 快指针走一步
    }
    
    // 返回重复的数字
    return slow;
}
