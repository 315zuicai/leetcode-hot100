/**
 * 70. 爬楼梯 (Climbing Stairs)
 * 
 * 假设你正在爬楼梯。需要爬 `n` 阶才能到达楼顶。
 * 
 * 每次你可以爬 `1` 或 `2` 个台阶。有多少种不同的方法可以爬到楼顶？
 * 
 * **示例 1：**
 * 输入：n = 2
 * 输出：2
 * 解释：有两种方法可以爬到楼顶：
 * 1. 1 阶 + 1 阶
 * 2. 2 阶
 * 
 * **示例 2：**
 * 输入：n = 3
 * 输出：3
 * 解释：有三种方法可以爬到楼顶：
 * 1. 1 阶 + 1 阶 + 1 阶
 * 2. 1 阶 + 2 阶
 * 3. 2 阶 + 1 阶
 * 
 * **提示：**
 * 1. `1 <= n <= 45`
 */

function climbStairs(n: number): number {
    // 如果 n 为 1，只有一种方法
    if (n === 1) return 1;

    // 定义 dp 数组，存储到达每一级的方法数
    let prev = 1, curr = 2;

    // 采用迭代方式计算第 n 级的方法数
    for (let i = 3; i <= n; i++) {
        let next = prev + curr; // 状态转移：f(n) = f(n-1) + f(n-2)
        prev = curr;  // 更新前一阶
        curr = next;  // 更新当前阶
    }

    return curr;
}
